// source: booking.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.booking.BookingId', null, global);
goog.exportSymbol('proto.booking.BookingList', null, global);
goog.exportSymbol('proto.booking.BookingRequest', null, global);
goog.exportSymbol('proto.booking.BookingResponse', null, global);
goog.exportSymbol('proto.booking.BookingStatusEnum', null, global);
goog.exportSymbol('proto.booking.BookingTime', null, global);
goog.exportSymbol('proto.booking.BookingUpdateRequest', null, global);
goog.exportSymbol('proto.booking.Seat', null, global);
goog.exportSymbol('proto.booking.SeatList', null, global);
goog.exportSymbol('proto.booking.SeatStatus', null, global);
goog.exportSymbol('proto.booking.StatusTime', null, global);
goog.exportSymbol('proto.booking.UpdateBookingStatusRequest', null, global);
goog.exportSymbol('proto.booking.UserId', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.booking.BookingId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.booking.BookingId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.booking.BookingId.displayName = 'proto.booking.BookingId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.booking.UserId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.booking.UserId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.booking.UserId.displayName = 'proto.booking.UserId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.booking.Seat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.booking.Seat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.booking.Seat.displayName = 'proto.booking.Seat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.booking.SeatList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.booking.SeatList.repeatedFields_, null);
};
goog.inherits(proto.booking.SeatList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.booking.SeatList.displayName = 'proto.booking.SeatList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.booking.SeatStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.booking.SeatStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.booking.SeatStatus.displayName = 'proto.booking.SeatStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.booking.StatusTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.booking.StatusTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.booking.StatusTime.displayName = 'proto.booking.StatusTime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.booking.BookingTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.booking.BookingTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.booking.BookingTime.displayName = 'proto.booking.BookingTime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.booking.BookingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.booking.BookingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.booking.BookingRequest.displayName = 'proto.booking.BookingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.booking.BookingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.booking.BookingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.booking.BookingResponse.displayName = 'proto.booking.BookingResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.booking.BookingList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.booking.BookingList.repeatedFields_, null);
};
goog.inherits(proto.booking.BookingList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.booking.BookingList.displayName = 'proto.booking.BookingList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.booking.BookingUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.booking.BookingUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.booking.BookingUpdateRequest.displayName = 'proto.booking.BookingUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.booking.UpdateBookingStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.booking.UpdateBookingStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.booking.UpdateBookingStatusRequest.displayName = 'proto.booking.UpdateBookingStatusRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.booking.BookingId.prototype.toObject = function(opt_includeInstance) {
  return proto.booking.BookingId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.booking.BookingId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.BookingId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.booking.BookingId}
 */
proto.booking.BookingId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.booking.BookingId;
  return proto.booking.BookingId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.booking.BookingId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.booking.BookingId}
 */
proto.booking.BookingId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.booking.BookingId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.booking.BookingId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.booking.BookingId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.BookingId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.booking.BookingId.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.booking.BookingId} returns this
 */
proto.booking.BookingId.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.booking.UserId.prototype.toObject = function(opt_includeInstance) {
  return proto.booking.UserId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.booking.UserId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.UserId.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.booking.UserId}
 */
proto.booking.UserId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.booking.UserId;
  return proto.booking.UserId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.booking.UserId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.booking.UserId}
 */
proto.booking.UserId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.booking.UserId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.booking.UserId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.booking.UserId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.UserId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 userId = 1;
 * @return {number}
 */
proto.booking.UserId.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.booking.UserId} returns this
 */
proto.booking.UserId.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.booking.Seat.prototype.toObject = function(opt_includeInstance) {
  return proto.booking.Seat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.booking.Seat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.Seat.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.booking.Seat}
 */
proto.booking.Seat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.booking.Seat;
  return proto.booking.Seat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.booking.Seat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.booking.Seat}
 */
proto.booking.Seat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeatid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.booking.Seat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.booking.Seat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.booking.Seat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.Seat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 seatId = 1;
 * @return {number}
 */
proto.booking.Seat.prototype.getSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.booking.Seat} returns this
 */
proto.booking.Seat.prototype.setSeatid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.booking.SeatList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.booking.SeatList.prototype.toObject = function(opt_includeInstance) {
  return proto.booking.SeatList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.booking.SeatList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.SeatList.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatsList: jspb.Message.toObjectList(msg.getSeatsList(),
    proto.booking.Seat.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.booking.SeatList}
 */
proto.booking.SeatList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.booking.SeatList;
  return proto.booking.SeatList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.booking.SeatList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.booking.SeatList}
 */
proto.booking.SeatList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.booking.Seat;
      reader.readMessage(value,proto.booking.Seat.deserializeBinaryFromReader);
      msg.addSeats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.booking.SeatList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.booking.SeatList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.booking.SeatList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.SeatList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.booking.Seat.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Seat seats = 1;
 * @return {!Array<!proto.booking.Seat>}
 */
proto.booking.SeatList.prototype.getSeatsList = function() {
  return /** @type{!Array<!proto.booking.Seat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.booking.Seat, 1));
};


/**
 * @param {!Array<!proto.booking.Seat>} value
 * @return {!proto.booking.SeatList} returns this
*/
proto.booking.SeatList.prototype.setSeatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.booking.Seat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.booking.Seat}
 */
proto.booking.SeatList.prototype.addSeats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.booking.Seat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.booking.SeatList} returns this
 */
proto.booking.SeatList.prototype.clearSeatsList = function() {
  return this.setSeatsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.booking.SeatStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.booking.SeatStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.booking.SeatStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.SeatStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    seats: (f = msg.getSeats()) && proto.booking.Seat.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.booking.SeatStatus}
 */
proto.booking.SeatStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.booking.SeatStatus;
  return proto.booking.SeatStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.booking.SeatStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.booking.SeatStatus}
 */
proto.booking.SeatStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.booking.Seat;
      reader.readMessage(value,proto.booking.Seat.deserializeBinaryFromReader);
      msg.setSeats(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.booking.SeatStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.booking.SeatStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.booking.SeatStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.SeatStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeats();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.booking.Seat.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Seat seats = 1;
 * @return {?proto.booking.Seat}
 */
proto.booking.SeatStatus.prototype.getSeats = function() {
  return /** @type{?proto.booking.Seat} */ (
    jspb.Message.getWrapperField(this, proto.booking.Seat, 1));
};


/**
 * @param {?proto.booking.Seat|undefined} value
 * @return {!proto.booking.SeatStatus} returns this
*/
proto.booking.SeatStatus.prototype.setSeats = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.booking.SeatStatus} returns this
 */
proto.booking.SeatStatus.prototype.clearSeats = function() {
  return this.setSeats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.booking.SeatStatus.prototype.hasSeats = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.booking.SeatStatus.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.booking.SeatStatus} returns this
 */
proto.booking.SeatStatus.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.booking.StatusTime.prototype.toObject = function(opt_includeInstance) {
  return proto.booking.StatusTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.booking.StatusTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.StatusTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttime: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.booking.StatusTime}
 */
proto.booking.StatusTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.booking.StatusTime;
  return proto.booking.StatusTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.booking.StatusTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.booking.StatusTime}
 */
proto.booking.StatusTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStarttime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.booking.StatusTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.booking.StatusTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.booking.StatusTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.StatusTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarttime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 startTime = 1;
 * @return {number}
 */
proto.booking.StatusTime.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.booking.StatusTime} returns this
 */
proto.booking.StatusTime.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.booking.BookingTime.prototype.toObject = function(opt_includeInstance) {
  return proto.booking.BookingTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.booking.BookingTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.BookingTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endtime: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.booking.BookingTime}
 */
proto.booking.BookingTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.booking.BookingTime;
  return proto.booking.BookingTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.booking.BookingTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.booking.BookingTime}
 */
proto.booking.BookingTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStarttime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.booking.BookingTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.booking.BookingTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.booking.BookingTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.BookingTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarttime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getEndtime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 startTime = 1;
 * @return {number}
 */
proto.booking.BookingTime.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.booking.BookingTime} returns this
 */
proto.booking.BookingTime.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 endTime = 2;
 * @return {number}
 */
proto.booking.BookingTime.prototype.getEndtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.booking.BookingTime} returns this
 */
proto.booking.BookingTime.prototype.setEndtime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.booking.BookingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.booking.BookingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.booking.BookingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.BookingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.booking.UserId.toObject(includeInstance, f),
    bookingtime: (f = msg.getBookingtime()) && proto.booking.BookingTime.toObject(includeInstance, f),
    seat: (f = msg.getSeat()) && proto.booking.Seat.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.booking.BookingRequest}
 */
proto.booking.BookingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.booking.BookingRequest;
  return proto.booking.BookingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.booking.BookingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.booking.BookingRequest}
 */
proto.booking.BookingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.booking.UserId;
      reader.readMessage(value,proto.booking.UserId.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = new proto.booking.BookingTime;
      reader.readMessage(value,proto.booking.BookingTime.deserializeBinaryFromReader);
      msg.setBookingtime(value);
      break;
    case 3:
      var value = new proto.booking.Seat;
      reader.readMessage(value,proto.booking.Seat.deserializeBinaryFromReader);
      msg.setSeat(value);
      break;
    case 4:
      var value = /** @type {!proto.booking.BookingStatusEnum} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.booking.BookingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.booking.BookingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.booking.BookingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.BookingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.booking.UserId.serializeBinaryToWriter
    );
  }
  f = message.getBookingtime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.booking.BookingTime.serializeBinaryToWriter
    );
  }
  f = message.getSeat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.booking.Seat.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional UserId user = 1;
 * @return {?proto.booking.UserId}
 */
proto.booking.BookingRequest.prototype.getUser = function() {
  return /** @type{?proto.booking.UserId} */ (
    jspb.Message.getWrapperField(this, proto.booking.UserId, 1));
};


/**
 * @param {?proto.booking.UserId|undefined} value
 * @return {!proto.booking.BookingRequest} returns this
*/
proto.booking.BookingRequest.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.booking.BookingRequest} returns this
 */
proto.booking.BookingRequest.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.booking.BookingRequest.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BookingTime bookingTime = 2;
 * @return {?proto.booking.BookingTime}
 */
proto.booking.BookingRequest.prototype.getBookingtime = function() {
  return /** @type{?proto.booking.BookingTime} */ (
    jspb.Message.getWrapperField(this, proto.booking.BookingTime, 2));
};


/**
 * @param {?proto.booking.BookingTime|undefined} value
 * @return {!proto.booking.BookingRequest} returns this
*/
proto.booking.BookingRequest.prototype.setBookingtime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.booking.BookingRequest} returns this
 */
proto.booking.BookingRequest.prototype.clearBookingtime = function() {
  return this.setBookingtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.booking.BookingRequest.prototype.hasBookingtime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Seat seat = 3;
 * @return {?proto.booking.Seat}
 */
proto.booking.BookingRequest.prototype.getSeat = function() {
  return /** @type{?proto.booking.Seat} */ (
    jspb.Message.getWrapperField(this, proto.booking.Seat, 3));
};


/**
 * @param {?proto.booking.Seat|undefined} value
 * @return {!proto.booking.BookingRequest} returns this
*/
proto.booking.BookingRequest.prototype.setSeat = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.booking.BookingRequest} returns this
 */
proto.booking.BookingRequest.prototype.clearSeat = function() {
  return this.setSeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.booking.BookingRequest.prototype.hasSeat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BookingStatusEnum status = 4;
 * @return {!proto.booking.BookingStatusEnum}
 */
proto.booking.BookingRequest.prototype.getStatus = function() {
  return /** @type {!proto.booking.BookingStatusEnum} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.booking.BookingStatusEnum} value
 * @return {!proto.booking.BookingRequest} returns this
 */
proto.booking.BookingRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.booking.BookingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.booking.BookingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.booking.BookingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.BookingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.booking.BookingId.toObject(includeInstance, f),
    bookingdata: (f = msg.getBookingdata()) && proto.booking.BookingRequest.toObject(includeInstance, f),
    checkintime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    checkouttime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isactive: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.booking.BookingResponse}
 */
proto.booking.BookingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.booking.BookingResponse;
  return proto.booking.BookingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.booking.BookingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.booking.BookingResponse}
 */
proto.booking.BookingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.booking.BookingId;
      reader.readMessage(value,proto.booking.BookingId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.booking.BookingRequest;
      reader.readMessage(value,proto.booking.BookingRequest.deserializeBinaryFromReader);
      msg.setBookingdata(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckintime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckouttime(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsactive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.booking.BookingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.booking.BookingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.booking.BookingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.BookingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.booking.BookingId.serializeBinaryToWriter
    );
  }
  f = message.getBookingdata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.booking.BookingRequest.serializeBinaryToWriter
    );
  }
  f = message.getCheckintime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCheckouttime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional BookingId id = 1;
 * @return {?proto.booking.BookingId}
 */
proto.booking.BookingResponse.prototype.getId = function() {
  return /** @type{?proto.booking.BookingId} */ (
    jspb.Message.getWrapperField(this, proto.booking.BookingId, 1));
};


/**
 * @param {?proto.booking.BookingId|undefined} value
 * @return {!proto.booking.BookingResponse} returns this
*/
proto.booking.BookingResponse.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.booking.BookingResponse} returns this
 */
proto.booking.BookingResponse.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.booking.BookingResponse.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BookingRequest bookingData = 2;
 * @return {?proto.booking.BookingRequest}
 */
proto.booking.BookingResponse.prototype.getBookingdata = function() {
  return /** @type{?proto.booking.BookingRequest} */ (
    jspb.Message.getWrapperField(this, proto.booking.BookingRequest, 2));
};


/**
 * @param {?proto.booking.BookingRequest|undefined} value
 * @return {!proto.booking.BookingResponse} returns this
*/
proto.booking.BookingResponse.prototype.setBookingdata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.booking.BookingResponse} returns this
 */
proto.booking.BookingResponse.prototype.clearBookingdata = function() {
  return this.setBookingdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.booking.BookingResponse.prototype.hasBookingdata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 checkinTime = 3;
 * @return {number}
 */
proto.booking.BookingResponse.prototype.getCheckintime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.booking.BookingResponse} returns this
 */
proto.booking.BookingResponse.prototype.setCheckintime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 checkoutTime = 4;
 * @return {number}
 */
proto.booking.BookingResponse.prototype.getCheckouttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.booking.BookingResponse} returns this
 */
proto.booking.BookingResponse.prototype.setCheckouttime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool isActive = 5;
 * @return {boolean}
 */
proto.booking.BookingResponse.prototype.getIsactive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.booking.BookingResponse} returns this
 */
proto.booking.BookingResponse.prototype.setIsactive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.booking.BookingList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.booking.BookingList.prototype.toObject = function(opt_includeInstance) {
  return proto.booking.BookingList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.booking.BookingList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.BookingList.toObject = function(includeInstance, msg) {
  var f, obj = {
    bookingsList: jspb.Message.toObjectList(msg.getBookingsList(),
    proto.booking.BookingResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.booking.BookingList}
 */
proto.booking.BookingList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.booking.BookingList;
  return proto.booking.BookingList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.booking.BookingList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.booking.BookingList}
 */
proto.booking.BookingList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.booking.BookingResponse;
      reader.readMessage(value,proto.booking.BookingResponse.deserializeBinaryFromReader);
      msg.addBookings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.booking.BookingList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.booking.BookingList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.booking.BookingList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.BookingList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBookingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.booking.BookingResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BookingResponse bookings = 1;
 * @return {!Array<!proto.booking.BookingResponse>}
 */
proto.booking.BookingList.prototype.getBookingsList = function() {
  return /** @type{!Array<!proto.booking.BookingResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.booking.BookingResponse, 1));
};


/**
 * @param {!Array<!proto.booking.BookingResponse>} value
 * @return {!proto.booking.BookingList} returns this
*/
proto.booking.BookingList.prototype.setBookingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.booking.BookingResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.booking.BookingResponse}
 */
proto.booking.BookingList.prototype.addBookings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.booking.BookingResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.booking.BookingList} returns this
 */
proto.booking.BookingList.prototype.clearBookingsList = function() {
  return this.setBookingsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.booking.BookingUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.booking.BookingUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.booking.BookingUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.BookingUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.booking.BookingId.toObject(includeInstance, f),
    bookingdata: (f = msg.getBookingdata()) && proto.booking.BookingRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.booking.BookingUpdateRequest}
 */
proto.booking.BookingUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.booking.BookingUpdateRequest;
  return proto.booking.BookingUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.booking.BookingUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.booking.BookingUpdateRequest}
 */
proto.booking.BookingUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.booking.BookingId;
      reader.readMessage(value,proto.booking.BookingId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.booking.BookingRequest;
      reader.readMessage(value,proto.booking.BookingRequest.deserializeBinaryFromReader);
      msg.setBookingdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.booking.BookingUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.booking.BookingUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.booking.BookingUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.BookingUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.booking.BookingId.serializeBinaryToWriter
    );
  }
  f = message.getBookingdata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.booking.BookingRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional BookingId id = 1;
 * @return {?proto.booking.BookingId}
 */
proto.booking.BookingUpdateRequest.prototype.getId = function() {
  return /** @type{?proto.booking.BookingId} */ (
    jspb.Message.getWrapperField(this, proto.booking.BookingId, 1));
};


/**
 * @param {?proto.booking.BookingId|undefined} value
 * @return {!proto.booking.BookingUpdateRequest} returns this
*/
proto.booking.BookingUpdateRequest.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.booking.BookingUpdateRequest} returns this
 */
proto.booking.BookingUpdateRequest.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.booking.BookingUpdateRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BookingRequest bookingData = 2;
 * @return {?proto.booking.BookingRequest}
 */
proto.booking.BookingUpdateRequest.prototype.getBookingdata = function() {
  return /** @type{?proto.booking.BookingRequest} */ (
    jspb.Message.getWrapperField(this, proto.booking.BookingRequest, 2));
};


/**
 * @param {?proto.booking.BookingRequest|undefined} value
 * @return {!proto.booking.BookingUpdateRequest} returns this
*/
proto.booking.BookingUpdateRequest.prototype.setBookingdata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.booking.BookingUpdateRequest} returns this
 */
proto.booking.BookingUpdateRequest.prototype.clearBookingdata = function() {
  return this.setBookingdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.booking.BookingUpdateRequest.prototype.hasBookingdata = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.booking.UpdateBookingStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.booking.UpdateBookingStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.booking.UpdateBookingStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.UpdateBookingStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.booking.BookingId.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.booking.UpdateBookingStatusRequest}
 */
proto.booking.UpdateBookingStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.booking.UpdateBookingStatusRequest;
  return proto.booking.UpdateBookingStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.booking.UpdateBookingStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.booking.UpdateBookingStatusRequest}
 */
proto.booking.UpdateBookingStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.booking.BookingId;
      reader.readMessage(value,proto.booking.BookingId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.booking.BookingStatusEnum} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.booking.UpdateBookingStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.booking.UpdateBookingStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.booking.UpdateBookingStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.booking.UpdateBookingStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.booking.BookingId.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional BookingId id = 1;
 * @return {?proto.booking.BookingId}
 */
proto.booking.UpdateBookingStatusRequest.prototype.getId = function() {
  return /** @type{?proto.booking.BookingId} */ (
    jspb.Message.getWrapperField(this, proto.booking.BookingId, 1));
};


/**
 * @param {?proto.booking.BookingId|undefined} value
 * @return {!proto.booking.UpdateBookingStatusRequest} returns this
*/
proto.booking.UpdateBookingStatusRequest.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.booking.UpdateBookingStatusRequest} returns this
 */
proto.booking.UpdateBookingStatusRequest.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.booking.UpdateBookingStatusRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BookingStatusEnum status = 2;
 * @return {!proto.booking.BookingStatusEnum}
 */
proto.booking.UpdateBookingStatusRequest.prototype.getStatus = function() {
  return /** @type {!proto.booking.BookingStatusEnum} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.booking.BookingStatusEnum} value
 * @return {!proto.booking.UpdateBookingStatusRequest} returns this
 */
proto.booking.UpdateBookingStatusRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.booking.BookingStatusEnum = {
  UNKNOWN: 0,
  BOOKED: 1,
  CHECKED_IN: 2,
  COMPLETED: 3,
  MISSED: 4
};

goog.object.extend(exports, proto.booking);
