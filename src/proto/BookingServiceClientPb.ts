/**
 * @fileoverview gRPC-Web generated client stub for booking
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: booking.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as booking_pb from './booking_pb';
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';


export class BookingServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetUserHistory = new grpcWeb.MethodDescriptor(
    '/booking.BookingService/GetUserHistory',
    grpcWeb.MethodType.UNARY,
    booking_pb.UserId,
    booking_pb.BookingList,
    (request: booking_pb.UserId) => {
      return request.serializeBinary();
    },
    booking_pb.BookingList.deserializeBinary
  );

  getUserHistory(
    request: booking_pb.UserId,
    metadata: grpcWeb.Metadata | null): Promise<booking_pb.BookingList>;

  getUserHistory(
    request: booking_pb.UserId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: booking_pb.BookingList) => void): grpcWeb.ClientReadableStream<booking_pb.BookingList>;

  getUserHistory(
    request: booking_pb.UserId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: booking_pb.BookingList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/booking.BookingService/GetUserHistory',
        request,
        metadata || {},
        this.methodDescriptorGetUserHistory,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/booking.BookingService/GetUserHistory',
    request,
    metadata || {},
    this.methodDescriptorGetUserHistory);
  }

  methodDescriptorGetBooking = new grpcWeb.MethodDescriptor(
    '/booking.BookingService/GetBooking',
    grpcWeb.MethodType.UNARY,
    booking_pb.BookingId,
    booking_pb.BookingResponse,
    (request: booking_pb.BookingId) => {
      return request.serializeBinary();
    },
    booking_pb.BookingResponse.deserializeBinary
  );

  getBooking(
    request: booking_pb.BookingId,
    metadata: grpcWeb.Metadata | null): Promise<booking_pb.BookingResponse>;

  getBooking(
    request: booking_pb.BookingId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: booking_pb.BookingResponse) => void): grpcWeb.ClientReadableStream<booking_pb.BookingResponse>;

  getBooking(
    request: booking_pb.BookingId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: booking_pb.BookingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/booking.BookingService/GetBooking',
        request,
        metadata || {},
        this.methodDescriptorGetBooking,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/booking.BookingService/GetBooking',
    request,
    metadata || {},
    this.methodDescriptorGetBooking);
  }

  methodDescriptorGetUnavailableSeat = new grpcWeb.MethodDescriptor(
    '/booking.BookingService/GetUnavailableSeat',
    grpcWeb.MethodType.UNARY,
    booking_pb.BookingTime,
    booking_pb.SeatList,
    (request: booking_pb.BookingTime) => {
      return request.serializeBinary();
    },
    booking_pb.SeatList.deserializeBinary
  );

  getUnavailableSeat(
    request: booking_pb.BookingTime,
    metadata: grpcWeb.Metadata | null): Promise<booking_pb.SeatList>;

  getUnavailableSeat(
    request: booking_pb.BookingTime,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: booking_pb.SeatList) => void): grpcWeb.ClientReadableStream<booking_pb.SeatList>;

  getUnavailableSeat(
    request: booking_pb.BookingTime,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: booking_pb.SeatList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/booking.BookingService/GetUnavailableSeat',
        request,
        metadata || {},
        this.methodDescriptorGetUnavailableSeat,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/booking.BookingService/GetUnavailableSeat',
    request,
    metadata || {},
    this.methodDescriptorGetUnavailableSeat);
  }

  methodDescriptorGetSeatStatus = new grpcWeb.MethodDescriptor(
    '/booking.BookingService/GetSeatStatus',
    grpcWeb.MethodType.SERVER_STREAMING,
    booking_pb.StatusTime,
    booking_pb.SeatStatus,
    (request: booking_pb.StatusTime) => {
      return request.serializeBinary();
    },
    booking_pb.SeatStatus.deserializeBinary
  );

  getSeatStatus(
    request: booking_pb.StatusTime,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<booking_pb.SeatStatus> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/booking.BookingService/GetSeatStatus',
      request,
      metadata || {},
      this.methodDescriptorGetSeatStatus);
  }

  methodDescriptorCreateBooking = new grpcWeb.MethodDescriptor(
    '/booking.BookingService/CreateBooking',
    grpcWeb.MethodType.UNARY,
    booking_pb.BookingRequest,
    booking_pb.BookingResponse,
    (request: booking_pb.BookingRequest) => {
      return request.serializeBinary();
    },
    booking_pb.BookingResponse.deserializeBinary
  );

  createBooking(
    request: booking_pb.BookingRequest,
    metadata: grpcWeb.Metadata | null): Promise<booking_pb.BookingResponse>;

  createBooking(
    request: booking_pb.BookingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: booking_pb.BookingResponse) => void): grpcWeb.ClientReadableStream<booking_pb.BookingResponse>;

  createBooking(
    request: booking_pb.BookingRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: booking_pb.BookingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/booking.BookingService/CreateBooking',
        request,
        metadata || {},
        this.methodDescriptorCreateBooking,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/booking.BookingService/CreateBooking',
    request,
    metadata || {},
    this.methodDescriptorCreateBooking);
  }

  methodDescriptorUpdateBooking = new grpcWeb.MethodDescriptor(
    '/booking.BookingService/UpdateBooking',
    grpcWeb.MethodType.UNARY,
    booking_pb.BookingUpdateRequest,
    booking_pb.BookingResponse,
    (request: booking_pb.BookingUpdateRequest) => {
      return request.serializeBinary();
    },
    booking_pb.BookingResponse.deserializeBinary
  );

  updateBooking(
    request: booking_pb.BookingUpdateRequest,
    metadata: grpcWeb.Metadata | null): Promise<booking_pb.BookingResponse>;

  updateBooking(
    request: booking_pb.BookingUpdateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: booking_pb.BookingResponse) => void): grpcWeb.ClientReadableStream<booking_pb.BookingResponse>;

  updateBooking(
    request: booking_pb.BookingUpdateRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: booking_pb.BookingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/booking.BookingService/UpdateBooking',
        request,
        metadata || {},
        this.methodDescriptorUpdateBooking,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/booking.BookingService/UpdateBooking',
    request,
    metadata || {},
    this.methodDescriptorUpdateBooking);
  }

  methodDescriptorUpdateBookingStatus = new grpcWeb.MethodDescriptor(
    '/booking.BookingService/UpdateBookingStatus',
    grpcWeb.MethodType.UNARY,
    booking_pb.UpdateBookingStatusRequest,
    booking_pb.BookingResponse,
    (request: booking_pb.UpdateBookingStatusRequest) => {
      return request.serializeBinary();
    },
    booking_pb.BookingResponse.deserializeBinary
  );

  updateBookingStatus(
    request: booking_pb.UpdateBookingStatusRequest,
    metadata: grpcWeb.Metadata | null): Promise<booking_pb.BookingResponse>;

  updateBookingStatus(
    request: booking_pb.UpdateBookingStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: booking_pb.BookingResponse) => void): grpcWeb.ClientReadableStream<booking_pb.BookingResponse>;

  updateBookingStatus(
    request: booking_pb.UpdateBookingStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: booking_pb.BookingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/booking.BookingService/UpdateBookingStatus',
        request,
        metadata || {},
        this.methodDescriptorUpdateBookingStatus,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/booking.BookingService/UpdateBookingStatus',
    request,
    metadata || {},
    this.methodDescriptorUpdateBookingStatus);
  }

  methodDescriptorDeleteBooking = new grpcWeb.MethodDescriptor(
    '/booking.BookingService/DeleteBooking',
    grpcWeb.MethodType.UNARY,
    booking_pb.BookingId,
    google_protobuf_empty_pb.Empty,
    (request: booking_pb.BookingId) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deleteBooking(
    request: booking_pb.BookingId,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deleteBooking(
    request: booking_pb.BookingId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deleteBooking(
    request: booking_pb.BookingId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/booking.BookingService/DeleteBooking',
        request,
        metadata || {},
        this.methodDescriptorDeleteBooking,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/booking.BookingService/DeleteBooking',
    request,
    metadata || {},
    this.methodDescriptorDeleteBooking);
  }

}

