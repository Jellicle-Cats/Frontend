/**
 * @fileoverview gRPC-Web generated client stub for booking
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: booking.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')
const proto = {};
proto.booking = require('./booking_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.booking.BookingServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.booking.BookingServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.booking.UserId,
 *   !proto.booking.BookingList>}
 */
const methodDescriptor_BookingService_GetUserHistory = new grpc.web.MethodDescriptor(
  '/booking.BookingService/GetUserHistory',
  grpc.web.MethodType.UNARY,
  proto.booking.UserId,
  proto.booking.BookingList,
  /**
   * @param {!proto.booking.UserId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.booking.BookingList.deserializeBinary
);


/**
 * @param {!proto.booking.UserId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.booking.BookingList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.booking.BookingList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.booking.BookingServiceClient.prototype.getUserHistory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/booking.BookingService/GetUserHistory',
      request,
      metadata || {},
      methodDescriptor_BookingService_GetUserHistory,
      callback);
};


/**
 * @param {!proto.booking.UserId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.booking.BookingList>}
 *     Promise that resolves to the response
 */
proto.booking.BookingServicePromiseClient.prototype.getUserHistory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/booking.BookingService/GetUserHistory',
      request,
      metadata || {},
      methodDescriptor_BookingService_GetUserHistory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.booking.BookingId,
 *   !proto.booking.BookingResponse>}
 */
const methodDescriptor_BookingService_GetBooking = new grpc.web.MethodDescriptor(
  '/booking.BookingService/GetBooking',
  grpc.web.MethodType.UNARY,
  proto.booking.BookingId,
  proto.booking.BookingResponse,
  /**
   * @param {!proto.booking.BookingId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.booking.BookingResponse.deserializeBinary
);


/**
 * @param {!proto.booking.BookingId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.booking.BookingResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.booking.BookingResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.booking.BookingServiceClient.prototype.getBooking =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/booking.BookingService/GetBooking',
      request,
      metadata || {},
      methodDescriptor_BookingService_GetBooking,
      callback);
};


/**
 * @param {!proto.booking.BookingId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.booking.BookingResponse>}
 *     Promise that resolves to the response
 */
proto.booking.BookingServicePromiseClient.prototype.getBooking =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/booking.BookingService/GetBooking',
      request,
      metadata || {},
      methodDescriptor_BookingService_GetBooking);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.booking.BookingTime,
 *   !proto.booking.SeatList>}
 */
const methodDescriptor_BookingService_GetUnavailableSeat = new grpc.web.MethodDescriptor(
  '/booking.BookingService/GetUnavailableSeat',
  grpc.web.MethodType.UNARY,
  proto.booking.BookingTime,
  proto.booking.SeatList,
  /**
   * @param {!proto.booking.BookingTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.booking.SeatList.deserializeBinary
);


/**
 * @param {!proto.booking.BookingTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.booking.SeatList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.booking.SeatList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.booking.BookingServiceClient.prototype.getUnavailableSeat =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/booking.BookingService/GetUnavailableSeat',
      request,
      metadata || {},
      methodDescriptor_BookingService_GetUnavailableSeat,
      callback);
};


/**
 * @param {!proto.booking.BookingTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.booking.SeatList>}
 *     Promise that resolves to the response
 */
proto.booking.BookingServicePromiseClient.prototype.getUnavailableSeat =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/booking.BookingService/GetUnavailableSeat',
      request,
      metadata || {},
      methodDescriptor_BookingService_GetUnavailableSeat);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.booking.StatusTime,
 *   !proto.booking.SeatStatus>}
 */
const methodDescriptor_BookingService_GetSeatStatus = new grpc.web.MethodDescriptor(
  '/booking.BookingService/GetSeatStatus',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.booking.StatusTime,
  proto.booking.SeatStatus,
  /**
   * @param {!proto.booking.StatusTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.booking.SeatStatus.deserializeBinary
);


/**
 * @param {!proto.booking.StatusTime} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.booking.SeatStatus>}
 *     The XHR Node Readable Stream
 */
proto.booking.BookingServiceClient.prototype.getSeatStatus =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/booking.BookingService/GetSeatStatus',
      request,
      metadata || {},
      methodDescriptor_BookingService_GetSeatStatus);
};


/**
 * @param {!proto.booking.StatusTime} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.booking.SeatStatus>}
 *     The XHR Node Readable Stream
 */
proto.booking.BookingServicePromiseClient.prototype.getSeatStatus =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/booking.BookingService/GetSeatStatus',
      request,
      metadata || {},
      methodDescriptor_BookingService_GetSeatStatus);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.booking.BookingRequest,
 *   !proto.booking.BookingResponse>}
 */
const methodDescriptor_BookingService_CreateBooking = new grpc.web.MethodDescriptor(
  '/booking.BookingService/CreateBooking',
  grpc.web.MethodType.UNARY,
  proto.booking.BookingRequest,
  proto.booking.BookingResponse,
  /**
   * @param {!proto.booking.BookingRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.booking.BookingResponse.deserializeBinary
);


/**
 * @param {!proto.booking.BookingRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.booking.BookingResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.booking.BookingResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.booking.BookingServiceClient.prototype.createBooking =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/booking.BookingService/CreateBooking',
      request,
      metadata || {},
      methodDescriptor_BookingService_CreateBooking,
      callback);
};


/**
 * @param {!proto.booking.BookingRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.booking.BookingResponse>}
 *     Promise that resolves to the response
 */
proto.booking.BookingServicePromiseClient.prototype.createBooking =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/booking.BookingService/CreateBooking',
      request,
      metadata || {},
      methodDescriptor_BookingService_CreateBooking);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.booking.BookingUpdateRequest,
 *   !proto.booking.BookingResponse>}
 */
const methodDescriptor_BookingService_UpdateBooking = new grpc.web.MethodDescriptor(
  '/booking.BookingService/UpdateBooking',
  grpc.web.MethodType.UNARY,
  proto.booking.BookingUpdateRequest,
  proto.booking.BookingResponse,
  /**
   * @param {!proto.booking.BookingUpdateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.booking.BookingResponse.deserializeBinary
);


/**
 * @param {!proto.booking.BookingUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.booking.BookingResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.booking.BookingResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.booking.BookingServiceClient.prototype.updateBooking =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/booking.BookingService/UpdateBooking',
      request,
      metadata || {},
      methodDescriptor_BookingService_UpdateBooking,
      callback);
};


/**
 * @param {!proto.booking.BookingUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.booking.BookingResponse>}
 *     Promise that resolves to the response
 */
proto.booking.BookingServicePromiseClient.prototype.updateBooking =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/booking.BookingService/UpdateBooking',
      request,
      metadata || {},
      methodDescriptor_BookingService_UpdateBooking);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.booking.UpdateBookingStatusRequest,
 *   !proto.booking.BookingResponse>}
 */
const methodDescriptor_BookingService_UpdateBookingStatus = new grpc.web.MethodDescriptor(
  '/booking.BookingService/UpdateBookingStatus',
  grpc.web.MethodType.UNARY,
  proto.booking.UpdateBookingStatusRequest,
  proto.booking.BookingResponse,
  /**
   * @param {!proto.booking.UpdateBookingStatusRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.booking.BookingResponse.deserializeBinary
);


/**
 * @param {!proto.booking.UpdateBookingStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.booking.BookingResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.booking.BookingResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.booking.BookingServiceClient.prototype.updateBookingStatus =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/booking.BookingService/UpdateBookingStatus',
      request,
      metadata || {},
      methodDescriptor_BookingService_UpdateBookingStatus,
      callback);
};


/**
 * @param {!proto.booking.UpdateBookingStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.booking.BookingResponse>}
 *     Promise that resolves to the response
 */
proto.booking.BookingServicePromiseClient.prototype.updateBookingStatus =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/booking.BookingService/UpdateBookingStatus',
      request,
      metadata || {},
      methodDescriptor_BookingService_UpdateBookingStatus);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.booking.BookingId,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_BookingService_DeleteBooking = new grpc.web.MethodDescriptor(
  '/booking.BookingService/DeleteBooking',
  grpc.web.MethodType.UNARY,
  proto.booking.BookingId,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.booking.BookingId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.booking.BookingId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.booking.BookingServiceClient.prototype.deleteBooking =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/booking.BookingService/DeleteBooking',
      request,
      metadata || {},
      methodDescriptor_BookingService_DeleteBooking,
      callback);
};


/**
 * @param {!proto.booking.BookingId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.booking.BookingServicePromiseClient.prototype.deleteBooking =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/booking.BookingService/DeleteBooking',
      request,
      metadata || {},
      methodDescriptor_BookingService_DeleteBooking);
};


module.exports = proto.booking;

